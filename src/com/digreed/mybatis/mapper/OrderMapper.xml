<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.digreed.mybatis.mapper.OrderMapper">
    <!--定义resultMap-->
    <!-- 订单查询关联用户的resultMap
	将整个查询的结果映射到cn.itcast.mybatis.po.Orders中
	 -->
    <resultMap id="OrdersUsersResultMap" type="Orders">
        <!--配置映射的订单信息-->
        <!--id：指定查询列中的唯一标识，订单信息中的唯一标识，如果有多个列组成唯一标识，配置多个id
        -->
        <id column="id" property="id"/>
        <result column="user_id" property="userId" />
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!--配置映射的关联用户信息-->
        <!--association：用于映射关联查询单个对象的信息
        property：要将关联查询的用户信息映射到Orders中哪个属性
        JavaType：这个属性的类型-->
        <association property="user" javaType="user">
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>

    <!--订单及订单明细的resultMap
    使用extents继承，不用重新配置订单信息和用户信息的映射-->
    <resultMap id="OrdersAndOrderDetailResultMap" type="orders" extends="OrdersUsersResultMap">
        <!--订单信息-->
        <!--用户信息-->
        <!--使用extents继承-->

        <!--订单明细信息
        一个订单关联查询出了多条明细，要使用collection进行映射
        collection：对关联查询到多条记录映射到集合对象中
        property：将关联查询到多条记录映射到Orders哪个属性中
        ofType：指定映射到list集合属性中pojo的类型-->
        <collection property="orderdetails" ofType="Orderdetail">
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>
    </resultMap>

    <!--查询用户及购买信息-->
    <resultMap type="User" id="UserAndItemsResultMap">
        <!-- 用户信息 -->
        <id column="user_id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!-- 订单信息
        一个用户对应多个订单，使用collection映射
         -->
        <collection property="ordersList" ofType="Orders">
            <id column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>

            <!-- 订单明细
        一个订单包括 多个明细
         -->
            <collection property="orderdetails" ofType="Orderdetail">
                <id column="orderdetail_id" property="id"/>
                <result column="items_id" property="itemsId"/>
                <result column="items_num" property="itemsNum"/>
                <result column="orders_id" property="ordersId"/>

                <!-- 商品信息
         一个订单明细对应一个商品
          -->
                <association property="items" javaType="Items">
                    <id column="items_id" property="id"/>
                    <result column="items_name" property="name"/>
                    <result column="items_detail" property="detail"/>
                    <result column="items_price" property="price"/>
                </association>
            </collection>
        </collection>
    </resultMap>

    <!--延迟加载的resultMap-->
    <resultMap id="OrdersUserlazyLoadingResultMap" type="Orders">
        <!--对订单信息进行映射配置-->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!--实现对用户信息进行延迟加载
        select：指定延迟加载需要执行的statement的id
        要使用UserMapper.xml中的findUserById完成根据用户id用户信息的查询，
        如果findUserById不在本mapper中需要前边加namespace
        column：订单信息中关联用户信息查询的列，是user_id-->
        <association property="user" javaType="User" select="com.digreed.mybatis.mapper.UserMapper.findUserById" column="user_id">
            <!--实现对用户信息进行延迟加载-->
        </association>
    </resultMap>

    <!--查询订单关联用户信息-->
<!--    <select id="findOrdersUser" resultType="OrderCustom">
        SELECT
          orders.*,
          user.username,
          user.sex,
          user.address
          FROM
          orders,
          USER
          WHERE orders.user_id = user.id
    </select>-->

    <!--使用resultMap-->
    <!--查询订单关联用户信息-->
    <select id="findOrdersUser" resultMap="OrdersUsersResultMap">
        SELECT
        orders.*,
        user.username,
        user.sex,
        user.address
        FROM
        orders,
        USER
        WHERE orders.user_id = user.id
    </select>

    <!--查询订单及订单明细的信息-->
    <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
        SELECT
         orders.*,
         user.username,
         user.sex,
         user.address,
         orderdetail.items_id,
         orderdetail.items_num,
         orderdetail.orders_id
         From
         orders,
         user,
         orderdetail
         WHERE orders.user_id=user.id AND orderdetail.orders_id=orders.id
    </select>
    
    <!--查询用户及购买信息-->
    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
        SELECT
 orders.*,
 user.username,
 user.sex,
 user.address,
 orderdetail.id orderdetail_id,
 orderdetail.items_id,
 orderdetail.items_num,
 orderdetail.orders_id,
 items.name items_name,
 items.detail items_detail,
 items.price items_price
FROM
 orders,
 USER,
 orderdetail,
 items
WHERE
 orders.user_id=user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id=items.id
    </select>

    <!--查询订单关联用户，用户信息使用延迟加载-->
    <select id="findOrdersUserlazyLoading" resultMap="OrdersUserlazyLoadingResultMap">
        SELECT * FROM orders
    </select>
    
    
    
</mapper>