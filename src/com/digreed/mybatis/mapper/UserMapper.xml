<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.digreed.mybatis.mapper.UserMapper">
    <!--开启本Mapper下的namespace下的二级缓存
    type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache
    要和ehcache整合，需要配置type为ehcache实现cache接口类型-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache" />

    <!--定义resultMap
    将SELECT id id_,username uername_ FROM user WHERE id=#{value}和
    User类中的属性作一个映射关系
    type：resultMap最终映射的java对象类型，可以使用别名
    id：对resultMap的唯一标识-->
    <resultMap id="userResultMap" type="user">
        <!--id表示查询结果集中唯一标识
        column：查询出来的列名
        property：type指定的pojo类型中的属性名
        最终resultMap对column和property作一个映射关系-->
        <id column="id_" property="id"/>
        <!--result：对普通列名映射定义
        column：查询出来的列名
        property：type指定的pojo类型中的属性名
        -->
        <result column="username_" property="username"/>
    </resultMap>

    <!--根据用户id查询用户信息-->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id=#{id}
    </select>
    <!--根据用户名称模糊查询用户信息-->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.digreed.mybatis.po.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>
    <!--添加用户-->
    <insert id="insertUser" parameterType="com.digreed.mybatis.po.User">
        INSERT INTO user (username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})
    </insert>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM user WHERE id=#{id}
    </delete>
    <!--根据用户id更新用户-->
    <update id="updateUser" parameterType="com.digreed.mybatis.po.User">
        UPDATE user SET username=#{username},sex=#{sex},address=#{address},birthday=#{birthday} WHERE id=#{id}
    </update>

    <!-- 用户信息综合查询
    #{userCustom.sex}:取出pojo包装对象中性别值
    ${userCustom.username}：取出pojo包装对象中用户名称
     -->
    <!--<select id="findUserList" parameterType="com.digreed.mybatis.po.UserQueryVo" resultType="com.digreed.mybatis.po.UserCustom">-->
        <!--SELECT * FROM user WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}%'-->
    <!--</select>-->

    <!--resultMap结果集映射查询-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM user WHERE id=#{value}
    </select>

    <!--sql片段-->
    <!--定义sql片段
    id：sql片段的唯一标识
    注意：是基于单表来定义sql片段，这样会这sql片段重用性才高
    在sql片段中不要使用where-->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                AND user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                AND user.username LIKE '%${userCustom.username}%'
            </if>
            <if test="ids!=null">
                <!--使用foreach遍历IDS
                collection：指定输入对象中的集合属性
                item：集合属性中的元素标识
                open：开始遍历是拼接的串
                close：结束遍历时拼接的串
                separateor：遍历的处理元素拼接的串-->
                <!--<foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">-->
                    <!--id=#{user_id}-->
                <!--</foreach>-->
                <!--实现“and in(25,16,10)”拼接-->
                <foreach collection="ids" item="user_id" open="AND id IN(" close=")" separator=",">
                    #{user_id}
                </foreach>
            </if>
        </if>
    </sql>


    <!--动态sql-->
    <!-- 用户信息综合查询
    #{userCustom.sex}:取出pojo包装对象中性别值
    ${userCustom.username}：取出pojo包装对象中用户名称
     -->
    <!--<select id="findUserList" parameterType="com.digreed.mybatis.po.UserQueryVo" resultType="com.digreed.mybatis.po.UserCustom">-->
        <!--SELECT * FROM user-->
        <!--<where>-->
            <!--&lt;!&ndash;where可以自动去除第一个AND&ndash;&gt;-->
            <!--<if test="userCustom!=null">-->
                <!--<if test="userCustom.sex!=null and userCustom.sex!=''">-->
                    <!--AND user.sex = #{userCustom.sex}-->
                <!--</if>-->
                <!--<if test="userCustom.username!=null and userCustom.username!=''">-->
                    <!--AND user.username LIKE '%${userCustom.username}%'-->
                <!--</if>-->
            <!--</if>-->
        <!--</where>-->
    <!--</select>-->
    <select id="findUserList" parameterType="com.digreed.mybatis.po.UserQueryVo" resultType="com.digreed.mybatis.po.UserCustom">
        SELECT * FROM user
        <where>
          <!--引用sql片段的id，如果refid指定的id不在本mapper文件中，需要前边加namespace-->
          <include refid="query_user_where"></include>
        </where>
    </select>


</mapper>